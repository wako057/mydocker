#!/bin/bash

#################
# Configuration
#################
export DOMAIN="wako057.net"
# export DOMAIN_FRONT="dev-indb.io"

# Trace
if [ "$DC_TRACE" = 1 ]; then
    set -x
fi

# Exit on error
set -e

# Functions
###########
help () {
    # Display help
    echo "Usage : "
    echo "$0 project_name docker_compose_options..."
    echo "$0 project_name git git_options..."
    echo ""
    echo "Wrapper to docker-compose"
}

log () {
    # Display log messages
    # :param: Log level : error, info or debug
    # :param: Message

    if [ $1 != "debug" ] || ( [ $1 = "debug" ] && [ "$DC_DEBUG" = 1 ]); then
        case $1 in
            error)
                prefix="$RED Error : "
            ;;
            info)
                prefix=" Info : "
            ;;
            debug)
                prefix="$CYAN Debug : "
            ;;
            *)
                prefix=""
            ;;
        esac

        if [ "$DC_PERFTRACE" = 1 ]; then
            now=$(date "+%s%N" |cut -b1-13)
            delta=$((now-LAST_LOG_TIME))
            LAST_LOG_TIME="$now"
            printf "%-10s$SHLVL$prefix$EOC%s\n" "$delta" "$2" 1>&2
        else
            printf "%s$SHLVL$prefix%s$EOC%s\n" "$(date +'%Y/%m/%d %H:%M:%S:%N')" "$2" 1>&2
        fi
    fi
}

get_docker_config () {
    # Cache docker config for later use
    if [ -z "$CACHE_DOCKER_CONFIG" ]; then
        CACHE_DOCKER_CONFIG="$($HERE/venv/bin/docker-compose $files config)"
    fi
    echo "$CACHE_DOCKER_CONFIG"
}

find_traefik_hosts () {
    # Determine the list of host that is handled by traefik
    log debug "Getting host list required by Traefik"
    get_docker_config | $HERE/venv/bin/python3 -c 'import yaml,os; print("\n".join([v["labels"]["traefik.frontend.rule"].split(";")[0] for v in yaml.load(os.sys.stdin)["services"].values() if "labels" in v and "traefik.frontend.rule" in v["labels"]]))' | grep -E '^Host:' | cut -d: -f2 |tr -d '[:blank:]' | sed 's/,/ /g'
}

get_app_dir_from_repo () {
    # Output the directory name from the repo name
    # :param: git clone address or directory

    if echo $1 |grep -sE '\.git$' > /dev/null; then
        app_dir=$(echo $1 | rev | cut -d/ -f1 |rev |sed -E 's/\.git$//g')
    else
        app_dir=$1
    fi

    echo $HERE/apps/$app_dir
}

get_host () {
    # Determine if an host is resolvable
    # :param: Host to resolve

    if $OSX; then
        resolved=$(dscacheutil -q host -a name $1 | grep ip_address | cut -d: -f2 | tr -d '[:blank:]')
    elif $LINUX; then
        resolved=$(getent hosts $1| cut -d" " -f1)
    else
        log error "Unknow system $(uname -s)"
        exit 1
    fi
    log debug "Host $host point to : $resolved"
    echo $resolved
}

deps () {
    # Determine dependancy list for a project
    # :param: project name

    app="$1"
    repositories=""
    directories=""
    compose_file=""

    log debug "Building dependancy list for $app"

    case $app in
      nexus)
        repository="git@github.com:wako057/nexus.git"
      ;;
      jenkins)
#		deps nexus
        repository="git@github.com:wako057/jenkins.git"
      ;;
      marvel-api)
        repository="git@github.com:wako057/marvel-api.git"
      ;;
      marvel-front)
        deps marvel-api
        repository="git@github.com:wako057/marvel-front.git"
      ;;
      marvel)
        deps marvel-api
        deps marvel-front
      ;;
      cerebro)
        repository="git@github.com:wako057/cerebro.git"
      ;;
      sonar)
        repository="git@github.com:wako057/sonar.git"
      ;;
      varnish)
        repository="varnish"
      ;;
      *)
          log error "Dependancy resolution was asked for app $app but this app doesn't exists in the current configuration"
          exit
      ;;
    esac
    # Extract directory from git repository name
    directory=$(echo $repository | cut -d/ -f2 | sed 's/.git//g')
    diacritic_directory=$(echo -n $directory | tr a-z A-Z| tr -c [:alnum:] _)
    export ${diacritic_directory}_PATH=$HERE/apps/$directory/
    log debug "Exporting ${diacritic_directory}_PATH variable"

    # Build compose file path
    compose_file=$HERE/apps/$directory/docker-compose.yml
    log debug "Adding compose file $compose_file"

    # Add NEEDED_REPOSITORIES and NEEDED_COMPOSE_FILES
    if ! [ -z "$NEEDED_REPOSITORIES" ]; then
        NEEDED_REPOSITORIES="$NEEDED_REPOSITORIES "
    fi
    NEEDED_REPOSITORIES="$NEEDED_REPOSITORIES $repository"

    if [ -z "$NEEDED_COMPOSE_FILES" ]; then
        NEEDED_COMPOSE_FILES="$HERE/docker-compose.yml"
    else
        NEEDED_COMPOSE_FILES="$NEEDED_COMPOSE_FILES "
    fi
    NEEDED_COMPOSE_FILES="$NEEDED_COMPOSE_FILES $compose_file"

    # Add OSx override if present
    compose_file_osx=$HERE/apps/$directory/docker-compose.macosx.yml
    if $OSX && test -f $compose_file_osx; then
        log debug "Adding compose file $compose_file_osx"
        NEEDED_COMPOSE_FILES="$NEEDED_COMPOSE_FILES $compose_file_osx"
    fi
}

# Initialization
#################
# Globals
NEEDED_REPOSITORIES=""
NEEDED_HOSTS=""
NEEDED_COMPOSE_FILES=""
LAST_LOG_TIME=$(date "+%s%N" |cut -b1-13)
CACHE_DOCKER_CONFIG=""
LINUX=false
OSX=false
RED="\e[31m"
GREEN="\e[32m"
CYAN="\e[36m"
EOC="\e[0m"
SKIP_CHECKS=${SKIP_CHECKS:-"0"}

# Determine directory for current script
HERE="$( cd "$( dirname "$0" )" >/dev/null && pwd )"
log debug "Script is in $HERE, executing commands for there"

# Fill system-dependant vars
case $(uname -s) in
    Darwin)
        OSX=true
    ;;
    Linux)
        LINUX=true
    ;;
esac


# Main
###########
# Check python
log debug "Checking python"
if ! which python3 2>/dev/null 1>/dev/null; then
    log error "You must install python3"
    exit 1
fi

# Create virtualenv if it doesn't exists
log debug "Checking virtualenv"
if ! [ -d $HERE/venv ]; then

    # Check venv module
    set +e
    venv_status=$(python3 -m virtualenv 2>/dev/null 1>/dev/null; echo $?)
    set -e
    if [ $venv_status != "2" ]; then
        log error "You must install python 3 \"virtualenv\" module"
        exit 2
    fi

    log info "Creating virtualenv"
    python3 -m virtualenv --python $(which python3) $HERE/venv
fi

# Check python modules
log debug "Checking python modules"
set +e
diff=$( diff -B <($HERE/venv/bin/pip3 freeze |grep -v "pkg-resources" |sort) <(cat $HERE/requirements.txt|sort))
set -e
if ! [ -z "$diff" ]; then
    $HERE/venv/bin/pip3 install -r $HERE/requirements.txt
fi

# Check that a project name was provided
if [ -z "$1" ]; then
    help
    log error "You haven't provided a project name"
    exit 3

elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    help

else
    # Expose UID and GID
    export USER_UID=$(id -u)
    export USER_GID=$(id -g)

    if ! echo $2 |grep -E '^(scale|run|bundle|start|create|pull|push|up)$' > /dev/null; then
        SKIP_CHECKS="1"
    fi

    # Determine dependancies
    deps $1

    # Check that application is cloned in "apps" directory
    missing_repos=""
    for repo in $NEEDED_REPOSITORIES; do
        app_dir=$(get_app_dir_from_repo $repo)
        log debug "Checking app directory $app_dir"
        if ! [ -d "$app_dir" ]; then
            log error "Directory $app_dir is not present"
            missing_repos="$missing_repos $repo"
        fi
    done
    if ! [ -z "$missing_repos" ]; then
        log error "Please run theses git commands : "
        for repo in $missing_repos; do
            app_dir=$(get_app_dir_from_repo $repo)
            echo "git clone $repo $app_dir"
        done
        exit 4;
    fi

    # Deduplicate files
    NEEDED_COMPOSE_FILES=$(echo -n $NEEDED_COMPOSE_FILES | awk 'BEGIN {ORS=" "; RS=" "} !x[$0]++')

    # Check docker-compose file existance
    missing_file=false
    for compose_file in $NEEDED_COMPOSE_FILES; do
        log debug "Checking docker-compose config $compose_file"
        if ! [ -f $compose_file ]; then
            log error "Compose file $compose_file doesn't exists"
            missing_file=true
        fi
    done
    if [ "$missing_file" != "false" ]; then exit 4; fi

    files=" -f "$(echo $NEEDED_COMPOSE_FILES |sed "s/ / -f /g")

    # Check hosts only for some commands
    if ! [ "$SKIP_CHECKS" = "1" ]; then
        # Find all hosts required by the http router/loadbalancer
        hosts_to_check=$(find_traefik_hosts)
        if [ $? != "0" ]; then exit 5; fi

        # Check that all hosts point to 127.0.0.1
        echo "host to check $hosts_to_check"
        missing_hosts=""
        for host in $hosts_to_check; do
            host_resolved=$(get_host $host)
            if [ "$host_resolved" != "127.0.0.1" ]; then
                log error "Host $host doesn't point to 127.0.0.1"
                missing_hosts="$missing_hosts $host"
            fi
        done
        if ! [ -z "$missing_hosts" ]; then
            log error "Please add this to your /etc/hosts file : "
            for host in $missing_hosts; do
                echo "127.0.0.1 $host"
            done | sort | uniq
            exit 4;
        fi
    fi

    # delete arg in order to have a proper launch arguments
    shift

    # Special commands
    case $1 in
        clean)
            set +e
            for i in $(ls -d $HERE/apps/* | grep -v varnish); do
                cd $i;
                j=$(echo $i | rev | cut -d/ -f 1 | rev)
                printf "$CYAN# Clean $GREEN$j\n"
                sudo rm -Rf node_modules vendor dist logs/* app/config/config.ini config.json
            done
        ;;
        git)
            shift
            set +e
            for i in $(ls -d $HERE/apps/* | grep -v varnish); do
                cd $i;
                echo ""
                echo "# $i"
                echo "#######################################################################"

                git $@ 3>&1 1>&2 2>&3 3>&- | sed -e 's/^/'$(printf $RED)'/g' | sed -e 's/$/'$(printf $EOC)'/g'
                cd -
            done
        ;;
        cache)
            $HERE/venv/bin/docker-compose $files $@
        ;;
        *)
          echo "$HERE/venv/bin/docker-compose $files $@"
            $HERE/venv/bin/docker-compose $files $@
        ;;
    esac

fi
log debug "Script ended"
